name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      matrix:
        # The order of these definition matters for the web output
        # TODO: Test on 32-bit systems (not possible with Github Actions?)
        # TODO: Test on Windows
        os: [ubuntu-20.04, macos-11]
        mpi: [MPICH, OpenMPI]
        findmpi: [MPIEXEC_EXECUTABLE, MPI_HOME, CMAKE_C_COMPILER]
        shared: [OFF, ON]
        mpitrampoline: [cd0c6dd21aee14f349f363242854dccbbd6aaf8a]
        mpiwrapper: [a52afb9c6900d8bfd5dd71fcc27519af4a4ebdb2]

    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2

    - name: Install MPItrampoline
      run: |
        git clone https://github.com/eschnett/MPItrampoline
        cd MPItrampoline
        git checkout ${{matrix.mpitrampoline}}
        case $RUNNER_OS in
        Linux)
            # do nothing
            ;;
        macOS)
            # Use GCC-11 from Homebrew
            export CC=gcc-11
            export FC=gfortran-11
            ;;
        esac
        cmake -S . -B build \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DBUILD_SHARED_LIBS=${{matrix.shared}} \
            -DCMAKE_INSTALL_PREFIX=$HOME/mpitrampoline
        cmake --build build
        cmake --install build

    - name: Configure
      run: |
        case $RUNNER_OS in
        Linux)
            # do nothing
            ;;
        macOS)
            # Use GCC-11 from Homebrew
            export CC=gcc-11
            export CXX=g++-11
            export FC=gfortran-11
            export MPITRAMPOLINE_CC=gcc-11
            export MPITRAMPOLINE_CXX=g++-11
            export MPITRAMPOLINE_FC=gfortran-11
            ;;
        esac
        case "${{matrix.findmpi}}" in
        MPIEXEC_EXECUTABLE)
            cmake -B ${{github.workspace}}/build \
                -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DMPIEXEC_EXECUTABLE=$HOME/mpitrampoline/bin/mpiexec \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX=$HOME/mpitest
            ;;
        MPI_HOME)
            cmake -B ${{github.workspace}}/build \
                -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DMPI_HOME=$HOME/mpitrampoline \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX=$HOME/mpitest
            ;;
        CMAKE_C_COMPILER)
            cmake -B ${{github.workspace}}/build \
                -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DCMAKE_C_COMPILER=$HOME/mpitrampoline/bin/mpicc \
                -DCMAKE_CXX_COMPILER=$HOME/mpitrampoline/bin/mpicxx \
                -DCMAKE_Fortran_COMPILER=$HOME/mpitrampoline/bin/mpifc \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX=$HOME/mpitest
            ;;
        esac

    - name: Build
      run: |
        case $RUNNER_OS in
        Linux)
            # do nothing
            ;;
        macOS)
            # Use GCC-11 from Homebrew
            export MPITRAMPOLINE_CC=gcc-11
            export MPITRAMPOLINE_CXX=g++-11
            export MPITRAMPOLINE_FC=gfortran-11
            ;;
        esac
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install ${{matrix.mpi}}
      run: |
        case $RUNNER_OS in
        Linux)
            case "${{matrix.mpi}}" in
                MPICH) packages=libmpich-dev;;
                OpenMPI) packages=libopenmpi-dev;;
            esac
            sudo apt-get install ${packages}
            ;;
        macOS)
            # # The Homebrew MPICH doesn't have the `mpi-f08` Fortran
            # # module, but cmake insists on it. We thus use MacPorts
            # # instead.
            # 
            # # case "${{matrix.mpi}}" in
            # #     MPICH) packages=mpich;;
            # #     OpenMPI) packages=open-mpi;;
            # # esac
            # # brew install $packages
            # 
            # # Install MacPorts
            # wget https://github.com/macports/macports-base/releases/download/v2.7.1/MacPorts-2.7.1-11-BigSur.pkg
            # sudo /usr/sbin/installer -pkg MacPorts-2.7.1-11-BigSur.pkg -target /
            # rm MacPorts-2.7.1-11-BigSur.pkg
            # echo /opt/local/bin >> $GITHUB_PATH
            # echo /opt/local/sbin >> $GITHUB_PATH
            # export "PATH=/opt/local/bin:/opt/local/sbin:$PATH"
            # sudo port sync
            # 
            # case "${{matrix.mpi}}" in
            #     MPICH) packages='mpich-gcc10 +fortran';;
            #     OpenMPI) packages='openmpi-gcc11 +fortran';;
            # esac
            # sudo port install $packages

            echo ls /usr/local/bin
            ls /usr/local/bin
            echo ls -l /usr/local/bin
            ls -l /usr/local/bin
            echo 'echo $PATH'
            echo $PATH
            echo /usr/local/bin >> $GITHUB_PATH
            echo 'echo $PATH'
            echo $PATH
            export PATH="/usr/local/bin:$PATH"
            echo 'echo $PATH'
            echo $PATH
            echo which gcc
            which gcc
            echo which g++
            which g++
            echo which gfortran
            which gfortran
            echo 'echo $PATH'
            echo $PATH

            case ${{matrix.mpi}} in
            MPICH)
                wget https://www.mpich.org/static/downloads/4.0/mpich-4.0.tar.gz
                tar xzf mpich*.tar.gz
                cd mpich*
                export CC=gcc
                export CXX=g++
                export FC=gfortran
                ./configure \
                    --disable-opencl \
                    --enable-threads=multiple \
                    --enable-two-level-namespace
                # Remove empty `-l` flags from libtool
                # (Why are they there? They should not be.)
                # Run the command several times to handle multiple (overlapping) occurrences.
                sed -i 's/"-l /"/g;s/ -l / /g;s/-l"/"/g' libtool
                sed -i 's/"-l /"/g;s/ -l / /g;s/-l"/"/g' libtool
                sed -i 's/"-l /"/g;s/ -l / /g;s/-l"/"/g' libtool
                make -j2
                make -j2 install
                ;;
            OpenMPI)
                wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.2.tar.gz
                tar xzf openmpi*.tar.gz
                cd openmpi*
                export CC=gcc
                export CXX=g++
                export FC=gfortran
                ./configure --enable-mpi-fortran=usempif08
                make -j2
                make -j2 install
                ;;
            esac
            ;;
        esac

    - name: Install mpiwrapper/${{matrix.mpi}}
      run: |
        # See MPIwrapper
        git clone https://github.com/eschnett/MPIwrapper
        cd MPIwrapper
        git checkout ${{matrix.mpiwrapper}}
        # case $RUNNER_OS in
        # Linux)
            cmake -S . -B build \
                -DCMAKE_CXX_COMPILER=mpicxx \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DCMAKE_INSTALL_PREFIX=$HOME/mpiwrapper-${{matrix.mpi}}
        #     ;;
        # macOS)
        #     case ${{matrix.mpi}} in
        #     MPICH)
        #         # We cannot use the compiler wrappers. These inject
        #         # `-flat_namespace` into the link flags. We cannot
        #         # have this; a plugin such as `libmpiwrapper.so` must
        #         # use `-twolevel_namespace`. Otherwise, the MPI calls
        #         # in `libmpiwrapper.so` would at run-time be resolved
        #         # to MPItrampoline instead of MPICH, leading to an
        #         # infinite recursion, stack overflow, and segfault.
        #         cmake -S . -B build \
        #             -DCMAKE_CXX_COMPILER=g++-mp-10 \
        #             -DCMAKE_Fortran_COMPILER=gfortran-mp-10 \
        #             -DMPI_CXX_ADDITIONAL_INCLUDE_DIRS=/opt/local/include/mpich-gcc10 \
        #             -DMPI_CXX_LIB_NAMES='mpicxx;mpi;pmpi' \
        #             -DMPI_Fortran_ADDITIONAL_INCLUDE_DIRS=/opt/local/include/mpich-gcc10 \
        #             -DMPI_Fortran_LIB_NAMES='mpifort;mpi;pmpi' \
        #             -DMPI_mpi_LIBRARY=/opt/local/lib/mpich-gcc10/libmpi.dylib \
        #             -DMPI_mpicxx_LIBRARY=/opt/local/lib/mpich-gcc10/libmpicxx.dylib \
        #             -DMPI_mpifort_LIBRARY=/opt/local/lib/mpich-gcc10/libmpifort.dylib \
        #             -DMPI_pmpi_LIBRARY=/opt/local/lib/mpich-gcc10/libpmpi.dylib \
        #             -DMPIEXEC_EXECUTABLE=/opt/local/bin/mpiexec-mpich-gcc10 \
        #             -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
        #             -DCMAKE_INSTALL_PREFIX=$HOME/mpiwrapper-${{matrix.mpi}}
        #         ;;
        #     OpenMPI)
        #         # The compiler wrappers have non-standard names
        #         cmake -S . -B build \
        #             -DCMAKE_CXX_COMPILER=mpicxx-openmpi-gcc11 \
        #             -DCMAKE_Fortran_COMPILER=mpifort-openmpi-gcc11 \
        #             -DMPIEXEC_EXECUTABLE=/opt/local/bin/mpiexec-openmpi-gcc11 \
        #             -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
        #             -DCMAKE_INSTALL_PREFIX=$HOME/mpiwrapper-${{matrix.mpi}}
        #         ;;
        #     esac
        #     ;;
        # esac
        cmake --build build --config ${{env.BUILD_TYPE}}
        cmake --install build --config ${{env.BUILD_TYPE}}

    - name: Test C ${{matrix.mpi}}
      run: |
        case "${{matrix.mpi}}" in
            MPICH) mpiexec_options='';;
            OpenMPI) mpiexec_options='--oversubscribe';;
        esac
        # if [ $RUNNER_OS = Linux -a ${{matrix.mpi}} = OpenMPI ]; then
        #     export MPITRAMPOLINE_DLOPEN_MODE=dlopen
        # fi
        export MPITRAMPOLINE_VERBOSE=1
        # export MPITRAMPOLINE_DLOPEN_BINDING=now
        export MPITRAMPOLINE_MPIEXEC=$HOME/mpiwrapper-${{matrix.mpi}}/bin/mpiwrapperexec
        export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
        $HOME/mpitrampoline/bin/mpiexec ${mpiexec_options} -n 4 $HOME/mpitest/bin/mpi-test-c

    - name: Test C++ ${{matrix.mpi}}
      run: |
        case "${{matrix.mpi}}" in
            MPICH) mpiexec_options='';;
            OpenMPI) mpiexec_options='--oversubscribe';;
        esac
        # if [ $RUNNER_OS = Linux -a ${{matrix.mpi}} = OpenMPI ]; then
        #     export MPITRAMPOLINE_DLOPEN_MODE=dlopen
        # fi
        export MPITRAMPOLINE_VERBOSE=1
        # export MPITRAMPOLINE_DLOPEN_BINDING=now
        export MPITRAMPOLINE_MPIEXEC=$HOME/mpiwrapper-${{matrix.mpi}}/bin/mpiwrapperexec
        export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
        $HOME/mpitrampoline/bin/mpiexec ${mpiexec_options} -n 4 $HOME/mpitest/bin/mpi-test-cxx

    - name: Test Fortran 77 mpif ${{matrix.mpi}}
      run: |
        ##TODO
        #if [ $RUNNER_OS = macOS -a \( ${{matrix.mpi}} = MPICH -o ${{matrix.findmpi}} = CMAKE_C_COMPILER -o ${{matrix.findmpi}} = MPI_HOME \) ]; then
        #    : # skip MPICH on macOS; it's broken for us because it's installed without two-level namespace
        #else
            case "${{matrix.mpi}}" in
                MPICH) mpiexec_options='';;
                OpenMPI) mpiexec_options='--oversubscribe';;
            esac
            # if [ $RUNNER_OS = Linux -a ${{matrix.mpi}} = OpenMPI ]; then
            #     export MPITRAMPOLINE_DLOPEN_MODE=dlopen
            # fi
            export MPITRAMPOLINE_VERBOSE=1
            # export MPITRAMPOLINE_DLOPEN_BINDING=now
            export MPITRAMPOLINE_MPIEXEC=$HOME/mpiwrapper-${{matrix.mpi}}/bin/mpiwrapperexec
            export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
            $HOME/mpitrampoline/bin/mpiexec ${mpiexec_options} -n 4 $HOME/mpitest/bin/mpi-test-mpif-f
        # fi

    - name: Test Fortran 90 mpif ${{matrix.mpi}}
      run: |
        # #TODO
        # if [ $RUNNER_OS = macOS -a \( ${{matrix.mpi}} = MPICH -o ${{matrix.findmpi}} = CMAKE_C_COMPILER \) ]; then
        #     : # skip MPICH on macOS; it's broken for us because it's installed without two-level namespace
        # else
            case "${{matrix.mpi}}" in
                MPICH) mpiexec_options='';;
                OpenMPI) mpiexec_options='--oversubscribe';;
            esac
            # if [ $RUNNER_OS = Linux -a ${{matrix.mpi}} = OpenMPI ]; then
            #     export MPITRAMPOLINE_DLOPEN_MODE=dlopen
            # fi
            export MPITRAMPOLINE_VERBOSE=1
            # export MPITRAMPOLINE_DLOPEN_BINDING=now
            export MPITRAMPOLINE_MPIEXEC=$HOME/mpiwrapper-${{matrix.mpi}}/bin/mpiwrapperexec
            export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
            $HOME/mpitrampoline/bin/mpiexec ${mpiexec_options} -n 4 $HOME/mpitest/bin/mpi-test-mpif-f90
        # fi

    - name: Test Fortran 90 mpi ${{matrix.mpi}}
      run: |
        # if [ $RUNNER_OS = macOS -a ${{matrix.mpi}} = MPICH ]; then
        #     : # skip MPICH on macOS; it's broken for us because it's installed without two-level namespace
        # else
            case "${{matrix.mpi}}" in
                MPICH) mpiexec_options='';;
                OpenMPI) mpiexec_options='--oversubscribe';;
            esac
            # if [ $RUNNER_OS = Linux -a ${{matrix.mpi}} = OpenMPI ]; then
            #     export MPITRAMPOLINE_DLOPEN_MODE=dlopen
            # fi
            export MPITRAMPOLINE_VERBOSE=1
            # export MPITRAMPOLINE_DLOPEN_BINDING=now
            export MPITRAMPOLINE_MPIEXEC=$HOME/mpiwrapper-${{matrix.mpi}}/bin/mpiwrapperexec
            export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
            $HOME/mpitrampoline/bin/mpiexec ${mpiexec_options} -n 4 $HOME/mpitest/bin/mpi-test-mpi-f90
        # fi

    - name: Test Fortran 90 mpi_f08 ${{matrix.mpi}}
      run: |
        # if [ $RUNNER_OS = macOS -a ${{matrix.mpi}} = MPICH ]; then
        #     : # skip MPICH on macOS; it's broken for us because it's installed without two-level namespace
        # else
            case "${{matrix.mpi}}" in
                MPICH) mpiexec_options='';;
                OpenMPI) mpiexec_options='--oversubscribe';;
            esac
            # if [ $RUNNER_OS = Linux -a ${{matrix.mpi}} = OpenMPI ]; then
            #     export MPITRAMPOLINE_DLOPEN_MODE=dlopen
            # fi
            export MPITRAMPOLINE_VERBOSE=1
            # export MPITRAMPOLINE_DLOPEN_BINDING=now
            export MPITRAMPOLINE_MPIEXEC=$HOME/mpiwrapper-${{matrix.mpi}}/bin/mpiwrapperexec
            export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
            $HOME/mpitrampoline/bin/mpiexec ${mpiexec_options} -n 4 $HOME/mpitest/bin/mpi-test-mpi_f08-f90
        # fi
