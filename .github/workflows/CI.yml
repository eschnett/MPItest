name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      matrix:
        mpi: [MPICH, OpenMPI]

    # The CMake configure and build commands are platform agnostic and
    # should work equally well on Windows or Mac. You can convert this
    # to a matrix build if you need cross-platform coverage. See:
    # https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install MPItrampoline
      run: |
        git clone https://github.com/eschnett/MPItrampoline
        cd MPItrampoline
        cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX=$HOME/mpitrampoline
        cmake --build build
        cmake --install build

    - name: Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE`
      # is only required if you are using a single-configuration
      # generator such as make. See
      # https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build \
            -DMPI_HOME=$HOME/mpitrampoline \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} || true
        echo /home/runner/work/MPItest/MPItest/build/CMakeFiles/CMakeOutput.log
        cat /home/runner/work/MPItest/MPItest/build/CMakeFiles/CMakeOutput.log
        echo /home/runner/work/MPItest/MPItest/build/CMakeFiles/CMakeError.log
        cat /home/runner/work/MPItest/MPItest/build/CMakeFiles/CMakeError.log
        false

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration. See
      # https://cmake.org/cmake/help/latest/manual/ctest.1.html for
      # more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Install
      # Install your program
      run: sudo cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install mpiwrapper/${{matrix.mpi}}
      run: |
        case "${{matrix.mpi}}" in
            MPICH) packages=libmpich-dev;;
            OpenMPI) packages=libopenmpi-dev;;
        esac
        sudo apt-get install ${packages}
        git clone https://github.com/eschnett/MPIwrapper
        cd MPIwrapper
        cmake -B ${{github.workspace}}/MPIwrapper/build \
            -DCMAKE_CXX_COMPILER=mpicxx \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_INSTALL_PREFIX=$HOME/mpiwrapper-${{matrix.mpi}}
        cmake --build ${{github.workspace}}/MPIwrapper/build --config ${{env.BUILD_TYPE}}
        cmake --install ${{github.workspace}}/MPIwrapper/build --config ${{env.BUILD_TYPE}}

    - name: Test C ${{matrix.mpi}}
      run: |
        case "${{matrix.mpi}}" in
            MPICH) mpiexec='mpiexec';;
            OpenMPI) mpiexec='mpiexec --oversubscribe';;
        esac
        export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
        ${mpiexec} -n 4 $HOME/mpitrampoline/bin/mpi-test-c

    - name: Test C++ ${{matrix.mpi}}
      run: |
        case "${{matrix.mpi}}" in
            MPICH) mpiexec='mpiexec';;
            OpenMPI) mpiexec='mpiexec --oversubscribe';;
        esac
        export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
        ${mpiexec} -n 4 $HOME/mpitrampoline/bin/mpi-test-cxx

    - name: Test Fortran 77 ${{matrix.mpi}}
      run: |
        case "${{matrix.mpi}}" in
            MPICH) mpiexec='mpiexec';;
            OpenMPI) mpiexec='mpiexec --oversubscribe';;
        esac
        export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
        ${mpiexec} -n 4 $HOME/mpitrampoline/bin/mpi-test-f

    - name: Test Fortran 90 ${{matrix.mpi}}
      run: |
        case "${{matrix.mpi}}" in
            MPICH) mpiexec='mpiexec';;
            OpenMPI) mpiexec='mpiexec --oversubscribe';;
        esac
        export MPITRAMPOLINE_LIB=$HOME/mpiwrapper-${{matrix.mpi}}/lib/libmpiwrapper.so
        ${mpiexec} -n 4 $HOME/mpitrampoline/bin/mpi-test-f90
